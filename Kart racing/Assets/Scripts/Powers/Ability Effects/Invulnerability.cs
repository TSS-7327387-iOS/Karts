
using System.Collections.Generic;
using UnityEngine;

public class Invulnerability : Powers
{
    public GameObject forceField;

    ////public ProjectileMover shoots;
    ////public Transform shootPoint;

    private void Start()
    {
        base.Initialize();
        forceField.SetActive(inVulnerability);
    }
    public override void InVulnerable(float duration)
    {
        ////InvokeRepeating(nameof(Shoot), 1, 0.75f);


        inVulnerability = true;
       // character.animator.SetBool("Defence", true);
        forceField.SetActive(inVulnerability);
        Invoke(nameof(ResetVulnerbility), duration);
        PlayPowerSound();
    }

   
    public override void ResetVulnerbility()
    {
        inVulnerability = false;
        character.isAnimatingPower = false;
        forceField.SetActive(inVulnerability);
    }
    private void OnDisable()
    {
        CancelInvoke();
        ResetVulnerbility();
        ShutAudioOff();
    }

    //public void Shoot()
    //{
    //    var target = FindClosestEnemy(transform.position, GameManager.Instance.enemyManager.enemiesAlive);
    //    shootPoint.LookAt(target);
    //    Instantiate(shoots, shootPoint.position, shootPoint.rotation).InitializeMissile(character);
    //}

    //public Transform FindClosestEnemy(Vector3 playerPosition, List<EnemyAI> enemies)
    //{
    //    EnemyAI closestEnemy = null;
    //    float closestDistance = Mathf.Infinity;
    //    if (GameManager.Instance.thirdPersonController.enabled && character.isEnemy)
    //        closestDistance = Vector3.Distance(playerPosition, GameManager.Instance.player.transform.position);
    //    bool playerClosest = true;
    //    foreach (var enemy in enemies)
    //    {
    //        if (enemy.transform == this.transform)
    //            continue;
    //        float distance = Vector3.Distance(playerPosition, enemy.transform.position);

    //        if (distance < closestDistance)
    //        {
    //            closestEnemy = enemy;
    //            closestDistance = distance;
    //            playerClosest = false;
    //        }
    //    }
    //    return playerClosest ? GameManager.Instance.player.transform : closestEnemy.transform;
    //}
}
